import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import io
import time

# Tamil font support
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']

# File paths
DATA_FILE = "data/рооро░рпБроирпНродрпБроХро│рпН.csv"
HISTORY_FILE = "data/рооро░рпБроирпНродрпБ_ро╡ро░ро▓ро╛ро▒рпБ.csv"

# Load or initialize data
def load_data():
    try:
        return pd.read_csv(DATA_FILE)
    except FileNotFoundError:
        return pd.DataFrame(columns=["рокрпЖропро░рпН", "роЕро│ро╡рпБ", "роиро╛ро│рпН роЕро│ро╡рпБ", "роХрпИропро┐ро░рпБрокрпНрокрпБ", 
                                   "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роорпН", "родрпКроЯроХрпНроХ родрпЗродро┐", 
                                   "роорпБроЯро┐ро╡рпБ родрпЗродро┐", "роХрпБро▒ро┐рокрпНрокрпБроХро│рпН", "роорпБройрпНройрпБро░ро┐роорпИ", "ро╡роХрпИ"])

def load_history():
    try:
        return pd.read_csv(HISTORY_FILE)
    except FileNotFoundError:
        return pd.DataFrame(columns=["родрпЗродро┐", "рооро░рпБроирпНродрпБ", "роЪрпЖропро▓рпН", "ро╡ро┐ро╡ро░роЩрпНроХро│рпН"])

def save_data(df):
    df.to_csv(DATA_FILE, index=False)

def save_history(df):
    df.to_csv(HISTORY_FILE, index=False)

# Enhanced stock status
def get_stock_status(stock, times_per_day):
    days_remaining = stock / times_per_day
    if days_remaining > 30:
        return "тЬЕ рокрпЛродрпБрооро╛ройродрпБ", f"{days_remaining:.0f} роиро╛роЯрпНроХро│рпН роЙро│рпНро│рой"
    elif days_remaining > 7:
        return "тЪая╕П ро╡ро┐ро░рпИро╡ро┐ро▓рпН ро╡ро╛роЩрпНроХро╡рпБроорпН", f"{days_remaining:.0f} роиро╛роЯрпНроХро│рпН роороЯрпНроЯрпБроорпЗ роЙро│рпНро│рой"
    else:
        return "тЭМ роЕро╡роЪро░роорпН!", f"ро╡рпЖро▒рпБроорпН {days_remaining:.0f} роиро╛роЯрпНроХро│рпН роороЯрпНроЯрпБроорпЗ! роЙроЯройрпЗ ро╡ро╛роЩрпНроХро╡рпБроорпН!"

# Streamlit configuration
st.set_page_config(page_title="рооро░рпБроирпНродрпБ роорпЗро▓ро╛рогрпНроорпИ", layout="wide", page_icon="ЁЯТК")

# Load data
med_data = load_data()
history_df = load_history()

# Custom header
st.markdown("""
    <style>
    .tamil-font {
        font-size:30px !important;
        color: #1f77b4;
    }
    </style>
    <p class="tamil-font">ЁЯТК роорпЗроорпНрокроЯрпНроЯ рооро░рпБроирпНродрпБ роорпЗро▓ро╛рогрпНроорпИ роЕроорпИрокрпНрокрпБ</p>
    """, unsafe_allow_html=True)

# Navigation
st.sidebar.header("рокроЯрпНроЯро┐ропро▓рпН")
page = st.sidebar.radio("рокроХрпНроХродрпНродрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНроХ", [
    "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ", 
    "рооро░рпБроирпНродрпБ роЪрпЗро░рпНроХрпНроХ", 
    "роХрпИропро┐ро░рпБрокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ",
    "рооро░рпБроирпНродрпБ ро╡ро░ро▓ро╛ро▒рпБ",
    "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
    "роЕро▒ро┐роХрпНроХрпИроХро│рпН",
    "роЕроорпИрокрпНрокрпБроХро│рпН"
])

# Dashboard
if page == "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ":
    st.header("ЁЯУК роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ")
    
    # Summary metrics
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("роорпКродрпНрод рооро░рпБроирпНродрпБроХро│рпН", len(med_data))
    with col2:
        st.metric("роорпКродрпНрод роХрпИропро┐ро░рпБрокрпНрокрпБ", med_data["роХрпИропро┐ро░рпБрокрпНрокрпБ"].sum())
    with col3:
        low_stock = len(med_data[med_data["роХрпИропро┐ро░рпБрокрпНрокрпБ"] <= 10])
        st.metric("роХрпБро▒рпИроирпНрод роХрпИропро┐ро░рпБрокрпНрокрпБ роОроЪрпНроЪро░ро┐роХрпНроХрпИ", f"{low_stock} рооро░рпБроирпНродрпБроХро│рпН")
    with col4:
        daily_doses = med_data["роиро╛ро│рпН роЕро│ро╡рпБ"].sum()
        st.metric("родро┐ройроЪро░ро┐ роЕро│ро╡рпБроХро│рпН", daily_doses)

    # Stock visualization
    if not med_data.empty:
        fig = px.bar(med_data, x="рокрпЖропро░рпН", y="роХрпИропро┐ро░рпБрокрпНрокрпБ",
                    title="рооро░рпБроирпНродрпБ роХрпИропро┐ро░рпБрокрпНрокрпБ роиро┐ро▓рпИ",
                    color="роХрпИропро┐ро░рпБрокрпНрокрпБ",
                    color_continuous_scale="RdYlBu")
        st.plotly_chart(fig)

        # Today's schedule
        st.subheader("роЗройрпНро▒рпИроп рооро░рпБроирпНродрпБ роЕроЯрпНроЯро╡рогрпИ")
        schedule_data = []
        current_time = datetime.now()
        for _, med in med_data.iterrows():
            times = med["роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роорпН"].split(", ")
            for time in times:
                schedule_time = datetime.strptime(time, "%H:%M")
                schedule_data.append({
                    "рооро░рпБроирпНродрпБ": med["рокрпЖропро░рпН"],
                    "роирпЗро░роорпН": time,
                    "роиро┐ро▓рпИ": "роОроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ" if schedule_time.time() < current_time.time() else "роиро┐ро▓рпБро╡рпИропро┐ро▓рпН"
                })
        
        schedule_df = pd.DataFrame(schedule_data)
        if not schedule_df.empty:
            st.table(schedule_df)

# Add Medication
elif page == "рооро░рпБроирпНродрпБ роЪрпЗро░рпНроХрпНроХ":
    st.header("тЮХ рокрпБродро┐роп рооро░рпБроирпНродрпБ роЪрпЗро░рпНроХрпНроХ")
    with st.form("add_med_form"):
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("рооро░рпБроирпНродро┐ройрпН рокрпЖропро░рпН")
            dosage = st.text_input("роЕро│ро╡рпБ (роЙ.родро╛: 1 рооро╛родрпНродро┐ро░рпИ, 5рооро┐ро▓ро┐)")
            category = st.selectbox("ро╡роХрпИ", ["рооро╛родрпНродро┐ро░рпИроХро│рпН", "родро┐ро░ро╡роорпН", "роКроЪро┐", "рооро▒рпНро▒ро╡рпИ"])
            priority = st.selectbox("роорпБройрпНройрпБро░ро┐роорпИ", ["роЙропро░рпН", "роироЯрпБродрпНродро░роорпН", "роХрпБро▒рпИроирпНрод"])
        
        with col2:
            times_per_day = st.number_input("роТро░рпБ роиро╛ро│рпИроХрпНроХрпБ роОродрпНродройрпИ роорпБро▒рпИ", min_value=1, step=1)
            stock = st.number_input("роЖро░роорпНрок роХрпИропро┐ро░рпБрокрпНрокрпБ", min_value=0, step=1)
            start_date = st.date_input("родрпКроЯроХрпНроХ родрпЗродро┐")
            end_date = st.date_input("роорпБроЯро┐ро╡рпБ родрпЗродро┐ (ро╡ро┐ро░рпБрокрпНрокроорпН)")

        st.subheader("роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роЩрпНроХро│рпН")
        reminder_times = []
        cols = st.columns(times_per_day)
        for i, col in enumerate(cols):
            with col:
                time = st.time_input(f"роирпЗро░роорпН {i+1}")
                reminder_times.append(time.strftime("%H:%M"))

        notes = st.text_area("роХрпБро▒ро┐рокрпНрокрпБроХро│рпН (ро╡ро┐ро░рпБрокрпНрокроорпН)")
        
        submitted = st.form_submit_button("рооро░рпБроирпНродрпБ роЪрпЗро░рпНроХрпНроХ")
        if submitted and name and dosage:
            new_entry = {
                "рокрпЖропро░рпН": name,
                "роЕро│ро╡рпБ": dosage,
                "роиро╛ро│рпН роЕро│ро╡рпБ": times_per_day,
                "роХрпИропро┐ро░рпБрокрпНрокрпБ": stock,
                "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роорпН": ", ".join(reminder_times),
                "родрпКроЯроХрпНроХ родрпЗродро┐": start_date.strftime("%Y-%m-%d"),
                "роорпБроЯро┐ро╡рпБ родрпЗродро┐": end_date.strftime("%Y-%m-%d"),
                "роХрпБро▒ро┐рокрпНрокрпБроХро│рпН": notes,
                "роорпБройрпНройрпБро░ро┐роорпИ": priority,
                "ро╡роХрпИ": category
            }
            new_entry_df = pd.DataFrame([new_entry])
            med_data = pd.concat([med_data, new_entry_df], ignore_index=True)
            save_data(med_data)
            
            # Log action
            history_df = pd.concat([history_df, pd.DataFrame([{
                "родрпЗродро┐": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "рооро░рпБроирпНродрпБ": name,
                "роЪрпЖропро▓рпН": "роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
                "ро╡ро┐ро╡ро░роЩрпНроХро│рпН": f"роЖро░роорпНрок роХрпИропро┐ро░рпБрокрпНрокрпБ: {stock}"
            }])], ignore_index=True)
            save_history(history_df)
            
            st.success(f"{name} ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!")

# Stock Management
elif page == "роХрпИропро┐ро░рпБрокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ":
    st.header("ЁЯУж роХрпИропро┐ро░рпБрокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ")
    
    if not med_data.empty:
        # Display stock management table
        med_data["Stock_Status"], med_data["Days_Remaining"] = zip(*med_data.apply(
            lambda row: get_stock_status(row["роХрпИропро┐ро░рпБрокрпНрокрпБ"], row["роиро╛ро│рпН роЕро│ро╡рпБ"]), axis=1))
        
        # Allow user to update stock
        st.subheader("роХрпИропро┐ро░рпБрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐роХрпНроХ")
        stock_updates = []
        for i, med in med_data.iterrows():
            new_stock = st.number_input(f"{med['рокрпЖропро░рпН']} - роХрпИропро┐ро░рпБрокрпНрокрпБ", 
                                       value=med["роХрпИропро┐ро░рпБрокрпНрокрпБ"], key=f"stock_{i}")
            stock_updates.append(new_stock)
        
        if st.button("роХрпИропро┐ро░рпБрокрпНрокрпБ роЪрпЗрооро┐роХрпНроХ"):
            med_data["роХрпИропро┐ро░рпБрокрпНрокрпБ"] = stock_updates
            save_data(med_data)
            st.success("роХрпИропро┐ро░рпБрокрпНрокрпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!")
        
        # Display updated stock data
        st.table(med_data[["рокрпЖропро░рпН", "роХрпИропро┐ро░рпБрокрпНрокрпБ", "Stock_Status", "Days_Remaining"]])
    else:
        st.warning("роЗро░рпБроирпНродрпБро╡ро░рпИ роОроирпНрод рооро░рпБроирпНродрпБроХро│рпБроорпН роЗро▓рпНро▓рпИ!")

# Medication History
elif page == "рооро░рпБроирпНродрпБ ро╡ро░ро▓ро╛ро▒рпБ":
    st.header("ЁЯУЭ рооро░рпБроирпНродрпБ ро╡ро░ро▓ро╛ро▒рпБ")
    
    if not history_df.empty:
        st.table(history_df)
    else:
        st.warning("роЗро░рпБроирпНродрпБро╡ро░рпИ роОроирпНрод ро╡ро░ро▓ро╛ро▒рпНро▒рпБроорпН роЗро▓рпНро▓рпИ.")

# Analytics
elif page == "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН":
    st.header("ЁЯУИ рооро░рпБроирпНродрпБ рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН")
    
    if not med_data.empty:
        # Category distribution
        fig1 = px.pie(med_data, names="ро╡роХрпИ", title="рооро░рпБроирпНродрпБ ро╡роХрпИроХро│ро┐ройрпН ро╡ро┐роиро┐ропрпЛроХроорпН")
        st.plotly_chart(fig1)
        
        # Stock trends
        fig2 = px.line(med_data, x="рокрпЖропро░рпН", y="роХрпИропро┐ро░рпБрокрпНрокрпБ", 
                      title="рооро░рпБроирпНродрпБ роХрпИропро┐ро░рпБрокрпНрокрпБ рокрпЛроХрпНроХрпБроХро│рпН")
        st.plotly_chart(fig2)

# Reports
elif page == "роЕро▒ро┐роХрпНроХрпИроХро│рпН":
    st.header("ЁЯУС роЕро▒ро┐роХрпНроХрпИроХро│рпН")
    
    st.subheader("тП░ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЕроЯрпНроЯро╡рогрпИ роЕро▒ро┐роХрпНроХрпИ")
    if not med_data.empty:
            # Prepare reminder schedule data
            reminder_data = []
            for _, med in med_data.iterrows():
                times = med["роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роорпН"].split(", ")
                for time in times:
                    reminder_data.append({
                        "рооро░рпБроирпНродрпБ": med["рокрпЖропро░рпН"],
                        "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпЗро░роорпН": time
                    })
            
            reminder_df = pd.DataFrame(reminder_data)
            st.table(reminder_df)

            # Download link for Reminder Report
            reminder_csv = reminder_df.to_csv(index=False)
            reminder_csv = reminder_csv.encode('utf-8')
            st.download_button(
                label="роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЕроЯрпНроЯро╡рогрпИ роЕро▒ро┐роХрпНроХрпИропрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН",
                data=reminder_csv,
                file_name="роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН_роЕроЯрпНроЯро╡рогрпИ.csv",
                mime="text/csv"
            )

# Settings
elif page == "роЕроорпИрокрпНрокрпБроХро│рпН":
    st.header("тЪЩя╕П роЕроорпИрокрпНрокрпБроХро│рпН")
    
    st.subheader("роЕро▒ро┐ро╡ро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБроХро│рпН")
    notification_method = st.multiselect(
        "роЕро▒ро┐ро╡ро┐рокрпНрокрпБ роорпБро▒рпИроХро│рпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНроХ",
        ["рооро┐ройрпНройроЮрпНроЪро▓рпН", "роХрпБро▒рпБроЮрпНроЪрпЖропрпНродро┐", "рокрпБро╖рпН роЕро▒ро┐ро╡ро┐рокрпНрокрпБ", "роТро▓ро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИ"]
    )
    
    st.subheader("роХро╛роЯрпНроЪро┐ роЕроорпИрокрпНрокрпБроХро│рпН")
    dark_mode = st.toggle("роЗро░рпБрогрпНроЯ рокропройрпНроорпБро▒рпИ")
    language = st.selectbox("роорпКро┤ро┐", ["родрооро┐ро┤рпН", "роЖроЩрпНроХро┐ро▓роорпН"])
    
    if st.button("роЕроорпИрокрпНрокрпБроХро│рпИ роЪрпЗрооро┐роХрпНроХ"):
        st.success("роЕроорпИрокрпНрокрпБроХро│рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯрой!")

# Footer
st.markdown("---")
st.markdown("ЁЯТК роорпЗроорпНрокроЯрпНроЯ рооро░рпБроирпНродрпБ роорпЗро▓ро╛рогрпНроорпИ роЕроорпИрокрпНрокрпБ - роЖро░рпЛроХрпНроХро┐ропрооро╛роХ ро╡ро╛ро┤рпБроЩрпНроХро│рпН!")
